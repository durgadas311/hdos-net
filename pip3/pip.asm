	TITLE	'PIP/Plus - PERIPHERAL INTERCHANGE PROGRAM'
	STL	'INTRODUCTION'

	LON	LCI

***	PIP - PERIHPERAL INTERCHANGE PROGRAM
*
*	J.G. LETWIN, 11/1977 FOR *HEATH* COMPANY
*
*	COPYRIGHT 1977 BY HEATH COMPANY
*
*	G.A. Chandler,	78/09	Maintenence Release
*			79/04
*			79/11	50.05.00
*			80	50.06.00
*			80/09	 /2.0a/
*			80/10	 /2.0b/
*	W.G. Parrott,	81-84	Patches
*
*			86/08	Released into Public Domain
*				 by Heath Company,
*				 August 16, 1986.

***	PIP/Plus - PERIPHERAL INTERCHANGE PROGRAM
*
*	W.G. Parrott,	85-86	 /3.0a/
*	R.L. Musgrave,	85-86	 /3.0a/

CUSTOM	EQU	0		REVISION #

TRUE	EQU	0
FALSE	EQU	1

PIPRES	EQU	TRUE		TRUE=CO-RESIDENT PIP
USER	EQU	FALSE		USER AREA FACILITY NOT IMPLEMENTED
$BATCH	EQU	FALSE		NO BATCH PROCESSING IN PIP'S $RTL
$MULTI	EQU	FALSE		DON'T ALLOW MULTIPLE COMMANDS IN $RTL
H17TBLS EQU	FALSE		REPLACE $TBLS ROM CODE

PIP.WS	EQU	110000A 	Warm Start Address			/3.0a/

	SPACE	4,10
***	USE:
*
*	DEST=SOURCE1 [,SOURCE2,...,SOURCEN] [/SWITCH1.../SWITCHN]
*
*	VERB SWITCHES:
*
*	/L[IST] 	List standard disk directory
*	/F[ULL] 	List complete disk directory			/3.0a/
*	/B[RIEF]	List brief disk directory
*	/M[INIMUM]	List minimum disk directory			/3.0a/
*	/G[ROUPS]	List file group numbers 			/
*	/SET[FLAG]:f..	Set flags on file(s)				/
*	/CLR[FLAG][:f..] Clear flags on file(s) 			/
*	/PUT[USER]:u..	Put file(s) in user area(s)			/
*	/REM[USER][:u..] Remove file(s) from user area(s)		/3.0a/
*	/DEL[ETE]	Delete file(s)
*	/R[ENAME]	Rename file(s)
*	/CRC		Calculate CRC checksums of file(s)		/3.0a/
*	/MOU[NT]	Mount device
*	/DIS[MOUNT]	Dismount device
*	/RES[ET]	Reset device
*	/VERS[ION]	PIP Version number				/3.0a/
*	/ID		Same as /VERS plus some data			/
*	/?[??]		Print HELP. file				/
*	/FUBAR		Available for user to patch			/
*	/SNAFU		Available for user to patch			/3.0a/
*
*	MODIFIER SWITCHES:
*
*	/S[YSTEM]	Include system files (S flag) also
*	/FL[AG]:f...	Include only files with f.. flags		/3.0a/
*	/NOF[LAG]:f...	Include only files without f.. flags		/
*	/US[ER]:u...	Include only files in u.. user areas		/
*	/NOU[SER]:u...	Include only files NOT in u.. user areas	/
*	/BEF[ORE][:dd-mmm-yy]  Include only files before this date	/
*	/CUR[RENT][:dd-mmm-yy] Include only files with current date	/
*	/AFT[ER]:dd-mmm-yy     Include only files after this date	/
*	/AGE:n		Include only files 'n' days old or older	/
*	/AC[CESS]	Use access date rather than creation date	/
*	/COU[NT][:n]	Include only files with an access count 	/
*	/NOC[OUNT][:n]	Include only files without an access count	/
*	/Q[UERY]	Include only selected files			/
*	/-		Reverse effect of wildcard			/
*	/SO[RT][:nrerdrarcr] Sort files for DEST usage			/
*	/REV[ERSE]	Sort in descending order (normally ascending)	/3.0a/
*	/SU[PRESS]	Supress trailing massages and audit trails
*	/ALL[OCATE]	Show file allocation NOT size
*	/P[AGE][:nn]	Paginate directory listing			/3.0a/
*	/COL:nn 	Number of files across page in /B listing	/
*	/D[ATE] 	Use current (NOT source) date on copy		/
*	/ATT[RIB][:f..] Carry source flags on copy			/
*	/K[EEP] 	Destination file flags to remain the same	/
*	/C[ONTIG]	Copy file(s) contiguous 			/
*	/FOR[CE]	Override W & D flags				/
*	/SA[FE] 	If DEST exists, ask before overwritting 	/
*	/V[ERIFY]	Verify source & destination with CRC		/
*	/XXX		Available for user to patch			/
*	/YYY		Available for user to patch			/
*	/ZZZ		Available for user to patch			/3.0a/
	STL	'SYSTEM DEFINITIONS & EQUIVALENCES'
	EJECT
**	SYSTEM EQUIVALENCES

CN.SOU	EQU	0		SOURCE CHANNEL NUMBER
CN.DES	EQU	1		DESTINATION CHANNEL NUMBER
CN.DIR	EQU	2		DIRECTORY CHANNEL NUMBER

**	PROGRAM ERROR CODES

PEC.DF	EQU	200Q		DEVICE FORMAT ERROR
PEC.DNC	EQU	201Q		DEVICES NOT CONSISTANT
PEC.TFI	EQU	203Q		TARGET FILE ILLEGAL
PEC.CS	EQU	204Q		CONTRADICTORY SWITCHES
PEC.IUW	EQU	205Q		ILLEGAL USE OF WILDCARD
PEC.IDF	EQU	206Q		ILLEGAL DESTINATION FILE FORMAT
PEC.SFI	EQU	207Q		SOURCE FILE ILLEGAL
PEC.ISS EQU	210Q		ILLEGAL SUB-SWITCH			/3.0a/
PEC.MSS EQU	211Q		MISSING SUB-SWITCH			/3.0a/

	XTEXT	HOSBASE
	XTEXT	ASCII
	XTEXT	MTRRAM
	XTEXT	HOSDEF
	XTEXT	ECDEF
	XTEXT	DDFDEF
	XTEXT	DIRDEF
	XTEXT	DIFDEF
	XTEXT	DISDEF
	XTEXT	LABDEF
	XTEXT	HOSEQU
	XTEXT	EDCON
	XTEXT	EDRAM
	XTEXT	ESVAL
	XTEXT	ESINT
	XTEXT	MTRDEF
	XTEXT	DEVDEF
	XTEXT	IOCDEF
	XTEXT	FBDEF
	XTEXT	DDDEF
	XTEXT	FILDEF
	XTEXT	ABSDEF
	XTEXT	PICDEF
	XTEXT	BSXDEF
	STL	'MAIN ROUTINE'
	EJECT
	IF	PIPRES
	ORG	PIP.WS
	ELSE
	ORG	USERFWA
	ENDIF

PIP	EQU	*

*	NOTE	PIP		; Start
*	NOTE	MEML		; End
*	NOTE	RMEML		; Top
*	NOTE	MEML-PIP	; Length
*	NOTE	200000A 	; Limit
	ERRPL	MEML-200000A

	ERRNZ	*-PIP		MUST be first thing
	JMP	WARM		warm start entry point

SYSOP	DB	0		<>0 IF IN SYSOP MODE

	DB	'@(#)PIP/Plus by Richard Musgrave',NL
	DW	2144H	;.DATE.		; date and
	DW	2918H	;.TIME.		;  time of assembly

*	CTL-D HIT

EXIT	EQU	*

	LDA	S.FLAG		SEE IF SYSCMD IS IN MEMORY
	ANI	S.SYSCM
	MVI	A,0		SO WE DON'T ABORT EXIT
	JNZ	42200A		SYSCMD.SYS WARM START

	SCALL	.EXIT		ELSE EXIT (A) = 0

*	COMMAND INTERPRETATION COMES HERE

RESTART EQU	*

	CALL	SHOW25X 	Clean up 25th line
	LDA	S.FLAG		Inform caller that PIP
	ORI	S.BREAK 	 was interupted
	STA	S.FLAG		User must clear this bit himself

RESTRT	LDA	MODE
	ANA	A
	JNZ	EXIT		ENTERED WITH COMMAND, WILL NOW EXIT
START	LXI	SP,STACK	CLEAN STACK
	CALL	PIP1		EXECUTE COMMAND

*	COMMANDS EXIT HERE IF NO ERRORS FOUND

	JMP	RESTRT

*	GET READY TO PROCESS COMMAND

PIP1	CALL	SDD		SET DEFAULT DEFAULT

*	CLEAR CHANNELS AND FILE BUFFER

	SCALL	.CLEARA 	CLEAR CHANNELS
	XRA	A
	STA	DESTFB+FB.FLG	FLAG FILE NOT OPEN

*	CLEAR DYNAMIC BUFFERS

	LXI	H,0
	SHLD	BUFSIZ		EMPTY BUFFER
	SHLD	NAMTLEN		CLEAR NAMTAB
	SHLD	NAMTMAX		CLEAR NAMTAB AREA
	LXI	H,BUFF
	SHLD	BUFPTR		SET BUFFER AGAINST END OF NAMTAB

*	INPUT COMMAND LINE

	CALL	$CCO		CLEAR CONTROL-O
	LDA	MODE
	ANA	A
	CZ	ACL	ACCEPT COMMAND LINE (UNLESS WAS PASSED ONE BY CALLER)
	JC	EXIT		EOF
	ERRNZ	I.COP
PIP2	LXI	H,COMAND
	MVI	B,SW.DATL
	CALL	$ZERO		CLEAR ALL SWITCHES
	LDA	S.FLAG		; GET CURRENT VERIFY STATE
	ANI	S.VFLG
	STA	VERIFY		; SET DEFAULT STATE
	LXI	H,LINE		(HL) = COMMAND ADDRESS
	CALL	$SOB		GET FIRST NON BLANK CHAR
	ANA	A
	JZ	START		NO COMMAND ENTERED, TRY AGAIN
	LXI	D,PIPA		(DE) = SWITCH LIST
	CALL	$DRS		DETECT AND REMOVE SWITCHES
	JC	ERROR		ERROR
	LDA	COMAND
	CALL	$TJMP		PROCESS COMMAND
	EJECT
**	COMMAND LIST

PIPB	DS	0		COMMAND PROCESSOR TABLE
I.COP	EQU	*-PIPB/2		COMMAND INDEX
	DW	COPY
I.LIS	EQU	*-PIPB/2
	DW	LIST		/L
I.FUL	EQU	*-PIPB/2
	DW	FULL		/F
I.BRE	EQU	*-PIPB/2
	DW	BRIEF		/B
I.MIN	EQU	*-PIPB/2
	DW	MINIMUM 	/M
I.GRP	EQU	*-PIPB/2
	DW	GROUPS		/G
I.SET	EQU	*-PIPB/2
	DW	SETFLG		/SET
I.CLR	EQU	*-PIPB/2
	DW	CLRFLG		/CLR
	IF	USER
I.PUT	EQU	*-PIPB/2
	DW	PUTUSR		/PUT
I.REM	EQU	*-PIPB/2
	DW	REMUSR		/REM
	ENDIF
I.DEL	EQU	*-PIPB/2
	DW	DELETE		/DEL
I.REN	EQU	*-PIPB/2
	DW	RENAME		/R
I.CRC	EQU	*-PIPB/2
	DW	CHECK		/CRC
I.MOU	EQU	*-PIPB/2
	DW	MOUNT		/MOU
I.DIS	EQU	*-PIPB/2
	DW	DISMOU		/DIS
I.RES	EQU	*-PIPB/2
	DW	RESET		/RES
I.VER	EQU	*-PIPB/2
	DW	VERSN		/VERS
I.VERX	EQU	*-PIPB/2
	DW	VERSNX		/ID
I.HLP	EQU	*-PIPB/2
	DW	HELP		/?
I.FUB	EQU	*-PIPB/2
	DW	IERR3		/FUBAR
I.SNA	EQU	*-PIPB/2
	DW	IERR3		/SNAFU
	SPACE	3,10
**	CCHIT - CTL-C HIT
*
*	ENTRY	FROM SYSTEM

CCHIT	CALL	$TYPTX
	DB	'^C',ENL
	SCALL	.CLRCO		CLEAR CONSOLE TYPEAHEAD
	JMP	RESTART		GET NEW COMMAND

	XTEXT	PIPSWI
	STL	'ACL - ACCEPT COMMAND LINE.'
	EJECT
***	ACL - ACCEPT COMMAND LINE.
*
*	ACL PROMPTS FOR AND READS A COMMAND LINE FROM
*	THE CONSOLE.
*
*	ENTRY	NONE
*	EXIT	'C' CLEAR, GOT LINE
*		 'LINE' = COMMAND LINE
*		'C' SET IF EOF
*	USES	ALL

ACL	CALL	$GNL		GUARANTEE NEW LINE
	CALL	$TYPTX
	DB	'P:',' '+200Q,0
	DW	0,0		ALLOW 8 CHAR PROMPT
	XRA	A		; A = I.CSLMD
	MOV	B,A		; Line mode with Echo
	MVI	C,CSL.ECH+CSL.RAW+CSL.CHR	; also clear Raw mode
	SCALL	.CONSL		CLEAR SPECIAL CONSOLE MODES
	LXI	H,LINE
	JMP	$RTL.		READ UPPER CASE LINE AND EXIT
	STL	'PRS - PRESET PROGRAM.'
	EJECT
***	PRS - PRESET PIP PROGRAM.
*
*	PRS IS CALLED TO PERFORM ONE-TIME-ONLY PRESETTING OF
*	THE PROGRAM ENVIRONMENT UPON A COLD START AT 'ENTRY'.
*
*	PRS IS CALLED TO PERFORM WARM-START PRESETTING OF THE
*	PROGRAM ENVIRONMENT UPON A WARM START AT 'WARM'.
*
*	ENTRY	NONE
*
*	EXIT	IF CORRECT VERSION OF HDOS
*		    NONE
*		ELSE
*		    EXIT TO HDOS
*
*	USES	ALL

ENTRY	EQU	*		INITIAL ENTRY POINT

PRS	SCALL	.VERS
	JC	PRS1		ERROR IN GETTING VERSION
	CPI	VERS
	JNZ	PRS1		NOT CORRECT VERSION OF HDOS
	MVI	A,377Q
	SCALL	.CLOSE		CLOSE OVERLAY CHANNEL
	LDA	S.FMASK 	GET FEATURE MASK
	ANI	F.TERM		ONLY WANT TERMINAL TYPE
	CPI	F.H19		IS IT H19 ?
	JNE	WARM		NO
	STA	H19FLG		YES, SET H19 FLAG
WARM	LXI	H,RMEML 	(HL) = RUN-TIME HIGH MEMORY
	SCALL	.SETTOP		SET HI MEMORY
	JC	PRS2		IF  ERROR
	LXI	H,CCHIT
	MVI	A,CTLC
	SCALL	.CTLC		SET CTL-C PROCESSING

*	SET UP DEVICE NAMES BASED ON SYSTEM DEFAULT

	LHLD	S.DFBLK 	(HL) = 'XX'
	MOV	A,H
	ORA	L
	JZ	WARM1		NO DEFAULT, LEAVE US ALONE
	LDA	S.DFBLK+2	(A) = ASCII UNIT #

	SHLD	BLSA
	STA	BLSA+2
	SHLD	BLSC
	STA	BLSC+2
	SHLD	CHEA
	STA	CHEA+2
	SHLD	EWSA
	STA	EWSA+2
	SHLD	SDDA
	STA	SDDA+2

*	SEE IF COMMAND LINE PASSED ON STACK

WARM1	LXI	H,0
	DAD	SP
	XCHG
	MVI	A,#STACK
	SUB	E
	MOV	C,A
	MVI	A,STACK/256
	SBB	D
	MOV	B,A		(BC) = BYTES ON STACK
	ORA	C
	STA	MODE		SET MODE <>0 IF LINE ON STACK
	JZ	START		NO LINE

*	HAVE COMMAND ON STACK. COPY INTO LINE BUFFER
*	(BC) = COUNT
*	(DE) = FWA

	LXI	H,LINE
	CALL	$MOVE		COPY
	MVI	M,0		ENSURE END
	JMP	START		START PROGRAM

PRS1	MVI	A,EC.NCV	NOT CORRECT VERSION
	STC
PRS2	MVI	H,NL
	SCALL	.ERROR
	JMP	ABORT		BAD PROBLEM

	XTEXT	PIPCOPY
	XTEXT	PIPLIST
	XTEXT	PIPCMDS
	XTEXT	PIPSUBS
	STL	'COMMON DECKS'
	EJECT
	XTEXT	H17SUBS
	XTEXT	CFD
	XTEXT	CCO
	XTEXT	GNL
	XTEXT	MLU
	XTEXT	MCU
	XTEXT	RTL2
	XTEXT	SOB
	XTEXT	TFNS
	XTEXT	TYPCC
	XTEXT	CRLF
	XTEXT	CPDEHL
	XTEXT	INDLB
	XTEXT	ISDEHL
	XTEXT	CAD
	XTEXT	DAD
	XTEXT	DDD
	XTEXT	UDDX
	XTEXT	UOW
	XTEXT	UHW
	XTEXT	MOVEL
	XTEXT	DRS
	XTEXT	DFSS
	XTEXT	DSSS
	XTEXT	SORT
	XTEXT	DNS
	XTEXT	DNV
	XTEXT	CVD
	XTEXT	DTB
	XTEXT	BITS
	XTEXT	RVL
	XTEXT	FOPE
	XTEXT	FWRIB
	XTEXT	FCLO
	XTEXT	FUTIL
	XTEXT	FERROR

PATCH	DS	0		PATCH AREA
	DB	'HDOS 3.0 - In remembrance of JGL'
	DB	' and GAC. With respect for HDOS.'
	STL	'DATA AND FILE BUFFERS'
	EJECT
H19FLG	DB	0		<>0 IF H19/VT52 TERMINAL
MODE	DB	0		<>0 IF LINE PASSED ON STACK
COMAND	DB	0		COMMAND IN PROGRESS

SYSTEM	DB	0		/S   flag (<>0 if /S specified)
FLAG	DB	0		/FL  flag (<>0 = flag mask)
NOFLAG	DB	0		/NOF flag (<>0 = flag mask)
	IF	USER
USER	DB	0		/US  flag (<>0 = user mask)
NOUSER	DB	0		/NOU flag (<>0 = user mask)
	ENDIF
BEFORE	DB	0		/BEF flag (<>0 if /BEF specified)
CURREN	DB	0		/CUR flag (<>0 if /CUR specified)
AFTER	DB	0		/AFT flag (<>0 if /AFT specified)
AGE	DW	0		/AGE data (<>0 = number of days)
ACCESS	DB	0		/AC  flag (<>0 if /AC specified)
COUNT	DB	0		/COU flag (<>0 = number of accesses)
NOCOUNT DB	0		/NOC flag (<>0 = number of accesses)
QUERY	DB	0		/Q   flag (<>0 if /Q specified)
NEGATE	DB	0		/-   flag (<>0 if /- specified)
SORT	DB	0		/SO  flag (<>0 if /SO specified)
REVERSE DB	0		/REV flag (0=ascending 3=descending)
SUPRES	DB	0		/SU  flag (<>0 if /SU specified)
ALLOCA	DB	0		/ALL flag (<>0 if /ALL specified)
PAGE	DB	0		/P   flag (<>0 = number of files per page)
COLUMN	DB	0		/COL flag (<>0 = number of columns for /B)
DATE	DB	0		/D   flag (<>0 if /D specified)
ATTRIB	DB	0		/ATT flag (0=NOT used, 1=/ATT, 2=/ATT:f..)
KEEP	DB	0		/K   flag (<>0 if /K specified)
CONTIG	DB	0		/C   flag (<>0 if /C specified)
FORCE	DB	0		/FOR flag (<>0 if /FOR specified)
SAFE	DB	0		/SA  flag (<>0 if /SA specified)
VERIFY	DB	0		/V   flag (<>0 if /V specified)
XUSR	DB	0		/XXX flag (<>0 if /XXX specified)
YUSR	DB	0		/YYY flag (<>0 if /YYY specified)
ZUSR	DB	0		/ZZZ flag (<>0 if /ZZZ specified)

D.SET	DB	0		Flag byte for /ATT:f.. & SET,CLR,PUT,REM
D.CNT	DW	0		Length of file for contig. copy

DATEB	DW	0		Before coded working date
DATEC	DW	0		Current coded working date
DATEA	DW	0		After coded working date
SW.DATL EQU	*-COMAND	Switch Data Length

DIRNAM	DB	'ddn:DIRECT.SYS',0	DIRECTORY FILE NAME

BUFPTR	DW	BUFF		POINTER TO START  OF BUFFER
BUFSIZ	DW	0		BUFFER LENGTH
	SPACE	3,10
**	FILE BLOCKS

NAMTLEN DW	0		NAME TABLE POINTER
NAMTMAX DW	0		MAX SIZE OF NAME TABLE
	SPACE	4,10
DESTFB	DS	0		DESTINATION FILE BLOCK
	DB	CN.DES		CHANNEL NUMBER
	DB	0		FLAGS
	DW	DESTBUF
	DW	DESTBUF
	DW	DESTBUF
	DW	DESTBFE		END OF BLOCK

	ERRNZ	*-MEML

*	THE NEXT 'FB.NAML' BYTES MUST BE RESERVED FOR DESTFB NAME AREA
*	LOCATE THEM JUST AFTER THE PIP MEMORY IMAGE
*	DS	FB.NAML 	NAME AREA

MEML	EQU	*		MEMORY LENGTH

	STL	'RUN-TIME WORK AREAS'
	EJECT
**	THE FOLLOWING ARE BUFFERS AND RUN-TIME WORK AREAS

DEFALT	EQU	MEML+FB.NAML	DEFAULT BLOCK

AENA	EQU	DEFALT+6	AEN WORK AREA
COPYD	EQU	AENA+FB.NAML	HOLD AREA FOR WILDCARD DESTINATION
MWNA	EQU	COPYD+FB.NAML	MWN WORK AREA
RENA	EQU	MWNA+FB.NAML	RENAME WORK AREA
EWSB	EQU	RENA+FB.NAML	30 BYTE WORK AREA FOR EWS
EWSC	EQU	EWSB+30 	WILDCARD PATTERN FOR DIRECTORY SEARCH

DESTBUF EQU	EWSC+8+3	DESTINATION FILE BUFFER (ALSO USED BY *CCW*)
DESTBFE EQU	DESTBUF+256	END OF BUFFER

LABEL	EQU	DESTBUF+256	Label Sector
	SPACE	3,10
**	PIO.XXX - IMAGE OF SYSTEM AIO.XXX AREA
*
*	THESE CELLS MIRROR THE SYSTEM AIO.XXX AREA

PIO.DEV EQU	LABEL+256	DEVICE CODE
PIO.UNI EQU	PIO.DEV+2	UNIT NUMBER (0-9)

PIO.DIR EQU	PIO.UNI+1	DIRECTORY ENTRY

$FOPWRK EQU	PIO.DIR+23	WORK AREA FOR $FOPE

LINE	EQU	$FOPWRK+FB.NAML COMMAND BUFFER

NAMTAB	EQU	LINE+101	NAME TABLE

BUFMINL	EQU	512		MINIMUM SIZE FOR BUFFER (WHEN IN USE)
BUFF	EQU	NAMTAB		BUFFER AREA STARTS AFTER NAMTAB

RMEML	EQU	BUFF		INITIAL RUNNING MEMORY LENGTH

	END	ENTRY

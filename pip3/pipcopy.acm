	STL	'COPY - PROCESS COPY COMMAND.'
	EJECT
***	COPY - PROCESS COPY COMMAND.
*
*	SYNTAX:
*
*	DEST=SOURCE1,...,SOURCEN
*
*	'DEST' IS THE DESTINATION FILE DESIGNATOR. IF NULL
*	(IN WHICH CASE THE '=' MAY BE OMITTED) IT DEFAULTS TO
*
*		TT:PIPDEST.JGL
*
*	THE 'SOURCE' FIELDS ARE THE SOURCE FILE DESIGNATORS. WILDCARDS
*	MAY BE USED FOR FILE NAME AND EXTENSION.
*	IF NO WILDCARDS ARE USED IN THE DESTINATION, MULTIPLE SOURCE FILES
*	ARE CONCATINATED TOGETHER.
*
*	IF WILDCARDS ARE PRESENT IN THE DESTINATION FILE DESCRIPTION,
*	THE SOURCE FILES ARE COPIED TO INDIVIDUAL OUTPUT FILES. THE
*	NAMES OF THE OUTPUT FILES ARE CREATED BY FILLING
*	THE 'WILD' SPOTS IN THE DESTINATION NAME WITH THE CORRESPONDING
*	CHARACTERS IN THE SOURCE NAME.

COPY	EQU	*

	CALL	DDF		DECODE DESTINATION FILE
	JC	ERROR		ERROR
	STA	COPYA		SAVE DESTINATION TYPE
	CALL	SDD		RESET DEFAULT DEFAULTS
	XRA	A		ALLOW *.*
	STA	COPYCT		RESET COPY COUNTER
	CALL	BSL		BUILD SOURCE FILE LIST
	JC	ERROR
	CALL	$MOVEL
	DW	FB.NAML
	DW	DESTFB+FB.NAM
	DW	COPYD		SAVE WILDCARD DESTINATION

	CALL	HMSF

*	HAVE DESTINATION AND SOURCE FILE NAMES. DO THE COPYING.
*
*	IF NO DESTINATION WILD CARDS, THUS COPYING TO A SINGLE OUTPUT
*	FILE, OPEN THAT FILE NOW.

	DCR	A		IF ONLY ONE SOURCE FILE TREAT AS WILDCARD
	JZ	COPY1		DEST TO ALLOW COPY/CONTIG

COPY.0	LDA	COPYA
	ANA	A
	JZ	COPY1		IS WILDCARDED

	CALL	CPYSAFE 	IS IT SAFE ?
	JC	COPY5.		BAIL OUT

	LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES	(A) = DESTINATION CHANNEL
	SCALL	.OPENW		OPEN IT
	JNC	COPY1

	CALL	FORCHKC 	TRY TO FORCE IT
	LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES
	SCALL	.OPENW
	JC	FCEC

*	OPEN NEXT SOURCE FILE

COPY1	LHLD	NAMTLEN
	MOV	A,H
	ORA	L
	JZ	COPY5		NO MORE INPUT FILES
	LXI	H,0
	SHLD	.CRCSUM 	CLEAR CHECKSUM FOR VERIFY
	LXI	H,NAMTAB	(HL) = NAME ADDRESS
	CALL	XCOPY1		PRINT SOURCE FILE
	XRA	A		CN.SOU = 0 = SOURCE CHANNEL
	STA	COPYNA		RESET NOT ASCII FLAG
	SCALL	.OPENR		OPEN FOR READ
	JC	NAMERR		IF ERROR

	LDA	CONTIG
	ANA	A
	JZ	COPY1.1

	XRA	A		CN.SOU = 0
	LXI	B,-1
	SCALL	.POSIT
	CPI	EC.EOF
	JNE	NAMERR
	MOV	H,B
	MOV	L,C
	CALL	$CHL
	DCX	H		HL = FILE LENGTH
	SHLD	D.CNT
	LXI	B,0
	XRA	A
	SCALL	.POSIT		RESET POINTER
	JC	NAMERR

*	GET AND SAVE THE FILE'S FLAGS

COPY1.1 LDA	ATTRIB
	CPI	2		AM FORCING FLAGS ON?
	JE	COPY1.2 	YES, CAN'T BE CARRYING FROM SOURCE, TOO.

	LHLD	S.CFWA		POINT TO CHANNEL -1
	ERRNZ	CN.SOU
	CALL	$HLIHL		NOW TO CHANNEL 0
	LXI	D,IOC.DIR+DIR.FLG
	DAD	D		POINT TO FLAG
	MOV	A,M		AND GET IT
	STA	COPYF		SAVE IN CASE TO CARRY ALONG VIA /ATT SWITCH

*	OPEN DESTINATION FILE IF WILDCARDS OR SINGLE SOURCE

COPY1.2 LDA	COPYC
	DCR	A
	JZ	COPY1.3

	LDA	COPYA
	ANA	A
	JNZ	COPY2		NOT WILDCARDS

COPY1.3 LXI	B,COPYD 	(BC) = WILDCARD PATTERN ADDRESS
	LXI	D,NAMTAB	(DE) = SOURCE NAME
	LXI	H,DESTFB+FB.NAM	(HL) = RESULT AREA
	CALL	XCOPY2		PRINT DESTINATION FILE

	CALL	CPYSAFE 	IS IT SAFE ?
	JNC	COPY1.4
	XRA	A
	SCALL	.CLEAR		CLOSE SOURCE FILE
	JC	NAMERR
	CALL	REN		REMOVE ENTRY FROM NAME TABLE
	LXI	H,COPYC
	DCR	M		COUNT = COUNT - 1
	JMP	COPY1		TRY NEXT FILE

COPY1.4 LDA	CONTIG
	ANA	A
	JZ	COPY1.6

	LHLD	D.CNT
	MOV	B,H
	MOV	C,L		BC = LENGTH
	LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES
	SCALL	.OPENC
	JMP	COPY1.7

COPY1.6 LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES
	SCALL	.OPENW
	JNC	COPY2

	CALL	FORCHKC 	TRY TO FORCE IT
	LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES
	SCALL	.OPENW
COPY1.7 JC	FCEC

*	INPUT AND OUTPUT FILES OPEN, COPY

COPY2	EQU	*

	LDA	H19FLG
	ANA	A
	JZ	COPY2.		NOT H19 SO MOVE ON

	CALL	CHKTT		CHECK IF DEST = TT:
	JNE	COPY2.		NOT LISTING ON CONSOLE SO MOVE ON

	LDA	SUPRES
	CPI	3
	JNC	COPY2.		NO STATUS LINE

	CALL	SHOW25
	CALL	$TYPTX
	DB	'Listin','g'+200Q
	CALL	SHOW25.

COPY2.	CALL	EBM		EXPAND BUFFER TO MAX SIZE
COPY3	LHLD	BUFSIZ
	MOV	B,H
	MOV	C,L		(BC) = LENGTH OF BUFFER
	LHLD	BUFPTR
	XCHG			(DE) = BUFFER FWA
	XRA	A		CN.SOU = 0
	PUSH	D
	SCALL	.READ
	POP	D		(DE) = BUFFER FWA
	PUSH	PSW
	JNC	COPY4		GOT IT ALL
	CPI	EC.EOF
	JE	COPY4		IS EOF
	POP	PSW		RESTORE ERROR CODE
	JMP	NAMERR

COPY4	EQU	*
	PUSH	H
	PUSH	D
	PUSH	B

	CALL	CHKTT		CHECK IF DEST = TT:
	JNZ	COPY4.		IS DIRECTORY DEVICE

	LDA	FORCE
	ANA	A
	JNZ	COPY4.		DON'T CHECK FOR ASCII, JUST COPY IT
	LHLD	BUFPTR
	MVI	C,0		CHECK ONE SECTOR
CO.LP	MOV	A,M
	ANI	200Q
	JNZ	NOTASC
	INX	H
	DCR	C
	JNZ	CO.LP
	JMP	COPY4.		PROBABLY ASCII SO COPY IT

*	NOT ASCII FILE, WILL PRODUCE GARBAGE

NOTASC	STA	COPYNA		FLAG NOT ASCII
	POP	B		TIDY UP AND EXPLAIN
	POP	D
	POP	H
	CALL	$TYPTX
	DB	BELL,ENL
	CALL	CPYSFN
	CALL	$TYPTX
	DB	' - NOT Ascii',ENL
	LXI	H,COPYC
	DCR	M		Count = Count - 1
	POP	PSW
	JMP	COPY4.X

COPY4.	POP	B
	POP	D
	POP	H
	LDA	BUFSIZ+1	(A) = # OF SECTORS IN BUFFER
	SUB	B
	STA	COPYG		; SAVE # OF SECTORS READ
	MOV	B,A		(B) = SECTORS READ
	MVI	C,0
	MVI	A,CN.DES
	SCALL	.WRITE		WRITE IT OUT
	JC	FCEC		ERROR ON WRITE

	LDA	VERIFY
	ANA	A
	JZ	COPY4.1 	; DON'T DO VERIFY

	CALL	CHKDD		; CHECK FOR DIR DEVICE
	JZ	COPY4.1 	; NOT DIRECTORY DEVICE

	LDA	COPYG		; GET # OF SECTORS READ
	MOV	B,A
	MVI	C,0		; BC = COUNT
	LHLD	.CRCSUM
	XCHG
	LHLD	BUFPTR		; HL => BUFFER FWA
	SCALL	.CRC16
	XCHG
	SHLD	.CRCSUM

COPY4.1 POP	PSW		(PSW) = STATUS FROM READ
	JNC	COPY3		NOT EOF
COPY4.X CALL	SBE		SHRINK BUFFER TO MINIMUM SIZE

	CALL	CHKTT		CHECK IF DEST = TT:
	JNE	COPY4.2 	NOT LISTING ON CONSOLE SO MOVE ON

	CALL	SHOW25X 	Clean up line 25

COPY4.2 XRA	A		CN.SOU = 0
	SCALL	.CLOSE		CLOSE SOURCE
	JC	NAMERR		ERROR ON CLOSE
	CALL	REN		REMOVE ENTRY FROM NAMTAB

*	IF DOING INDIVIDUAL FILE COPIES, CLOSE OUTPUT FILE.

	LDA	COPYA
	ANA	A
	JZ	COPY4A		NOT CONCATINATING

	LDA	COPYC
	CPI	1		IS SINGLE INPUT FILE?
	JNE	COPY1		NO, CONCATENATING, GO COPY MORE.

COPY4A	CALL	XFLAGS
	CALL	XATTRIB 	COPY ATTRIBUTE OF SOURCE
	CALL	XDATE		CLOSE DESTINATION
	JC	FCEC		ERROR ON CLOSE
	CALL	XCOPY3		SHOW IT COPIED

	CALL	CHKVFY		; CHECK VERIFY STATE
	JC	RESTART 	; CRC ERROR

	JMP	COPY1		GET NEXT FILE

**	ALL COPIES COMPLETE. CLOSE FILES AND CLEAN UP

COPY5	LDA	COPYC
	ANA	A
	JNZ	COPY6

*	NO FILES COPIED

COPY5.	CALL	$GNL
	CALL	$TYPTX
	DB	NL,'No',' '+200Q
	CALL	COPY7.
	MVI	A,CN.DES
	SCALL	.CLEAR		CLEAR CHANNEL
	RET

COPY6	MVI	B,0		(BC) = COUNT OF FILES COPIED
	MOV	C,A
	LDA	COPYA
	ANA	A
	JZ	COPY7		WILDCARDED

*	SINGLE OUTPUT FILE (CONCATENATING)

	MOV	A,C
	CPI	1		SINGLE INPUT FILE?
	JZ	COPY7		YES, ALREADY CLOSED.

	PUSH	B		SAVE COUNT
	CALL	XFLAGS
	MVI	A,CN.DES
	SCALL	.CLOSE		CLOSE OUTPUT FILE
	POP	B		(BC) = FILES COPIED COUNT
	JC	FCEC		ERROR ON CLOSE

	PUSH	B		; SAVE COUNT
	CALL	CHKVFY		; CHECK VERIFY STATE
	POP	B		; RESTORE COUNT
	JC	RESTART 	; CRC ERROR

*	TYPE FILE COUNT

COPY7	LDA	SUPRES
	ANA	A
	RNZ			SUPPRESS TRAIL MESSAGE
	MVI	A,3
	LXI	H,COPYE
	CALL	$UDDS		UNPACK COUNT INTO MESSAGE
	CALL	$GNL
	CALL	$TYPTX
	DB	NL
COPYE	DB	'XXX',' '+200Q
COPY7.	CALL	$TYPTX
	DB	'Files Copied',ENL
	RET

COPYA	DB	0		DESTINATION FILE WILDCARD FLAG (=0 IF WC)
COPYC	DB	0		FILES COPIED COUNT
COPYCT	DB	0		COPY COUNTER
COPYF	DB	0		HOLD PLACE FOR SOURCE FILE'S FLAGS
COPYG	DB	0		# OF SECTORS READ
COPYCS	DW	0		SOURCE CRC CHECKSUM
COPYNA	DB	0		<>0 = NOT ASCII
	SPACE	4,10
**	COPY COMMAND EXTENSIONS

XCOPY1	LDA	SUPRES
	ANA	A
	RNZ
	LDA	COPYA
	ANA	A
	RNZ			PRINT ONLY WILD-CARDED TRANSFERS
	CALL	$CRLF
	PUSH	H
	CALL	CAD
	CALL	TFNS
	POP	H
	RET

XCOPY2	PUSH	H
	CALL	MWN		MERGE WILDCARD NAME
	LDA	COPYA
	ANA	A
	JZ	XCPY2
	LDA	COPYC
	DCR	A
	JZ	XCPY2.
XCPY2	LDA	SUPRES
	ANA	A
	JZ	XCPY2..
XCPY2.	POP	H
	RET

XCPY2.. CALL	$TYPTX
	DB	' -->',' '+200Q
	CALL	TFNS
	POP	H
	RET

XCOPY3	LDA	SUPRES
	ANA	A
	RNZ
	LDA	COPYA
	ANA	A
	RNZ
	LDA	COPYNA
	ANA	A
	RNZ
	CALL	$TYPTX
	DB	' ...Copie','d'+200Q
	RET

*	SHOW FILE NAME

CPYSFN	LXI	H,NAMTAB
SFNLP	MOV	A,M
	ANA	A
	RZ
	SCALL	.SCOUT
	INX	H
	JMP	SFNLP

*	CHECK FOR 'TT' AS DEST
*	'Z'  = IS 'TT'
*	'NZ' = IS NOT 'TT'

CHKTT	LXI	H,DESTFB+FB.NAM
	CALL	$HLIHL
	LXI	D,'TT'
	JMP	$CDEHL

*	CHECK FOR DIRECTORY DEVICE
*	'Z'  = NOT DIR
*	'NZ' = IS DIR

CHKDD	LXI	H,DESTFB+FB.NAM
	CALL	$HLIHL
	XCHG
	SCALL	.GDA			; BC => DEV. TABLE ENTRY
	JC	FCEC
	LXI	H,DEV.FLG
	DAD	B			; HL => FLAG BYTE
	MOV	A,M			; (A) = FLAG BYTE
	ANI	DT.DD			; IS IT DIRECTORY DEVICE
	RET

*	DETERMINE CRC VALIDITY OF COPY

CHKVFY	LDA	VERIFY
	ANA	A			; TEST/CLEAR CARRY
	RZ				; DON'T DO VERIFY

	CALL	CHKDD			; CHECK FOR DIR DEVICE
	RZ				; NOT DIRECTORY DEVICE

	LDA	SUPRES
	ANA	A
	JNZ	CHKVFY1
	LDA	COPYA
	ANA	A
	JNZ	CHKVFY1 		; NOT WILDCARD
	CALL	$TYPTX
	DB	', Verifying..','.'+200Q

CHKVFY1 LHLD	.CRCSUM
	SHLD	COPYCS			; SAVE SOURCE CRCSUM
	LXI	H,DESTFB+FB.NAM 	; POINT TO DESTINATION
	CALL	CKSUM			; DO CRC CHECKSUM
	XCHG				; DE = CRCSUM OF DEST
	LHLD	COPYCS			; GET SOURCE CRCSUM
	CALL	$CDEHL			; COMPARE
	JNE	CKERR			; NOT SAME, ERROR

*	CRC WAS SAME

	LDA	SUPRES
	ANA	A			; TEST/CLEAR CARRY
	RNZ
	LHLD	COPYCS
	MOV	B,H
	MOV	C,L
	LXI	H,CNUM2
	MVI	A,5
	CALL	$UDD

	CALL	$TYPTX
	DB	'Ok, CRC = '
CNUM2	DB	'nnnnn',200Q
	ANA	A			; CLEAR CARRY
	RET

*	CRC WAS DIFFERENT

CKERR	CALL	$TYPTX
	DB	'CRC ERROR',BELL+200Q
	STC				; SET CARRY
	RET

XDATE	LDA	DATE			CHECK FOR SWITCH
	ANA	A
	JNZ	XDATEX			IS /D, USE CURRENT DATE & TIME

	LHLD	S.CFWA			CHANNEL POINTER -1
	CALL	$HLIHL			CHANNEL POINTER  0 = CN.SOU
	INX	H
	INX	H
	CALL	$HLIHL
	INX	H
	INX	H
	INX	H
	MOV	A,M
	ANI	DT.DD			IS IT A DIRECTORY DEVICE ?
	JZ	XDATEX			NO, USE CURRENT DATE & TIME

	LHLD	S.CFWA			CHANNEL POINTER -1
	CALL	$HLIHL			CHANNEL POINTER  0 = CN.SOU
	LXI	D,IOC.DIR+DIR.CTH
	DAD	D
	PUSH	H
	CALL	$HLIHL
	SHLD	XDATET			SAVE SOURCE TIME
	POP	H
	LXI	D,DIR.CRD-DIR.CTH
	DAD	D
	CALL	$HLIHL
	SHLD	XDATED			SAVE SOURCE DATE

	LHLD	S.CFWA			CHANNEL POINTER -1
	CALL	$HLIHL			CHANNEL POINTER  0
	CALL	$HLIHL			CHANNEL POINTER  1 = CN.DES
	LXI	D,IOC.DIR+DIR.CTH
	DAD	D
	LXI	D,*-*
XDATET	EQU	*-2
	CALL	ISDEHL			FORCE DEST TIME
	LXI	D,DIR.CRD-DIR.CTH-2
	DAD	D
	LXI	D,*-*
XDATED	EQU	*-2
	CALL	ISDEHL			FORCE DEST DATE

XDATEX	MVI	 A,CN.DES
	SCALL	.CLOSE
	RET

XATTRIB LDA	ATTRIB			WANT TO CARRY THEM ALONG?
	DCR	A
	RNZ				NOPE.

XATT1	LHLD	S.CFWA			CHANNEL -1
	CALL	$HLIHL			   "	0
	CALL	$HLIHL			   "	1
	ERRNZ	CN.DES-1
	LXI	D,IOC.DIR+DIR.FLG	OFFSET TO FLAGS
	DAD	D
	LDA	COPYF			GET FROM THE SOURCE FILE
	ERRNZ	DIF.CNT-00010000B
	ANI	11101111B		DON'T CARRY 'C' FLAG
	MOV	M,A			SET THE FLAG
	RET

XFLAGS	LDA	ATTRIB
	CPI	2			FORCE ON FLAGS?
	JE	XFLG1			YES

	LDA	KEEP
	ANA	A			KEEP DEST FLAGS?
	RZ

XFLG1	LDA	D.SET
	STA	COPYF			SAVE
	JMP	XATT1

FORCHKC PUSH	PSW			SAVE ERROR CODE

	LDA	FORCE
	ANA	A
	JZ	FCEC.			POP & ABORT

	LDA	SYSOP
	ANA	A
	JNZ	FORCK			SKIP LOCK CHECK IF SYSOP

	POP	PSW			RESTORE ERROR CODE
	CPI	EC.FL			CHECK FOR L FLAG
	JE	FCEC			ABORT
	PUSH	PSW			ANTICIPATE NEXT POP

FORCK	POP	PSW			RESTORE ERROR CODE
	CPI	EC.WPV			CHECK FOR W FLAG
	JE	FCPC			WE'RE OK
	CPI	EC.LAD			CHECK FOR D FLAG
	JNE	FCEC			ABORT

FCPC	LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES
	LXI	D,SDDA
	SCALL	.OPENR			OPEN FOR READ
	JC	FCEC
	LHLD	S.CFWA
	CALL	$HLIHL
	CALL	$HLIHL
	LXI	D,IOC.DIR+DIR.FLG
	DAD	D
	MOV	A,M
	STA	D.SET			SAVE FLAGS
	MVI	M,0
	LHLD	S.CFWA
	CALL	$HLIHL
	CALL	$HLIHL
	LXI	D,IOC.FLG
	DAD	D
	MVI	A,FT.OW+FT.OU
	ORA	M
	MOV	M,A			KLUDGE
	MVI	A,CN.DES
	SCALL	.CLOSE
	RNC				ALL IS WELL, RETURN TO CALLER
	PUSH	PSW			ANTICIPATE NEXT POP

FCEC.	POP	PSW			RESTORE ERROR CODE
FCEC	LXI	H,DESTFB
	JMP	$FERROR

*	HOW MANY (SOURCE) FILES ARE THERE?

HMSF	LHLD	NAMTLEN 	SIZE OF THE NAME TABLE
	MOV	B,H
	MOV	C,L		IN (BC)
	LXI	D,FB.NAML	ENTRY LENGTH
	CALL	$DU66		(L) = NUMBER OF FILES IN LIST
	MOV	A,H
	ANA	A
	JNZ	IERR2		SHOULD NEVER HAPPEN
	MOV	A,L
	STA	COPYC		SAVE FILE COUNT

	PUSH	PSW
	MOV	C,A
	MVI	B,0
	LXI	H,CNUM1
	MVI	A,3
	CALL	$UDDN		UNPACK AND RETURN
	POP	PSW

	RET

*	SHOW WHICH FILE WE ARE DOING ON THE 25TH LINE

SHOW25	LXI	H,COPYCT	POINT TO COPY COUNT
	INR	M		BUMP
	MOV	C,M		GET CURRENT FILE #
	MVI	B,0
	LXI	H,CNUM0
	MVI	A,3
	CALL	$UDDN

	CALL	$TYPTX		SHOW FILE NAME ON 25TH LINE
	DB	ESC,'j' 	save cursor position
	DB	ESC,'x1'	enable 25th line
	DB	ESC,'Y8 '	goto 25th line
	DB	ESC,'K'+200Q	erase to eol
	RET

SHOW25. CALL	$TYPTX
	DB	' File '
CNUM0	DB	'nnn of '
CNUM1	DB	'nnn =',' '+200Q

	CALL	CPYSFN		SHOW FILE NAME

	CALL	$TYPTX
	DB	ESC,'k'+200Q	restore cursor position
	RET

SHOW25X LDA	H19FLG
	ANA	A
	RZ			NOT H19 SO MOVE ON

	LDA	SUPRES
	CPI	3
	RNC			NO STATUS LINE

	CALL	$TYPTX
	DB	ESC,'y','1'+200Q	disable 25th line
	LXI	H,S.CUSOR
	DCR	M		don't count the 'y1' in the
	DCR	M		cursor position

	RET

*	Is it SAFE to copy ?

CPYSAFE LDA	SAFE
	ANA	A		TEST SAFE & CLEAR CARRY
	RZ			DON'T CARE

	LXI	H,DESTFB+FB.NAM
	MVI	A,CN.DES
	SCALL	.OPENR
	JNC	CPYSAF1
	CPI	EC.FNF
	JNE	FCEC
	JMP	CPYSAF4

CPYSAF1 MVI	A,CN.DES
	SCALL	.CLEAR
	JC	FCEC
	CALL	$CRLF
	LXI	H,DESTFB+FB.NAM
	CALL	TFNS
	CALL	$TYPTX
	DB	' exists, Replace/Skip/Abort ?',' '+200Q
	SCALL	.CLRCO

	XRA	A		A = I.CSLMD
	MVI	B,CSL.CHR
	MVI	C,CSL.ECH+CSL.CHR
	SCALL	.CONSL		SET CHAR/ECHO

CPYSAF2 SCALL	.SCIN
	JC	CPYSAF2
	CALL	$MCU
	CPI	'R'
	JE	CPYSAF4
	CPI	'S'
	STC			SET CARRY JUST IN CASE
	RE
	CPI	'A'
	JNE	CPYSAF3
	SCALL	.CLRCO
	JMP	RESTART

CPYSAF3 CALL	$TYPTX
	DB	BELL,BS,' ',BS+200Q
	JMP	CPYSAF2

CPYSAF4 XRA	A		CLEAR CARRY
	RET
